rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ============================================================================
    // PRODUCTION FIRESTORE RULES FOR GITALONG
    // üîê Security Level: Production (Strict)
    // üéØ Designed for: Production Deployment
    // üìù Last Updated: 2025-01-02
    // ============================================================================
    
    // ============================================================================
    // üë§ USER PROFILES COLLECTION
    // ============================================================================
    match /users/{userId} {
      // Users can read/write their own profile
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Allow reading basic profile info for matching
      allow read: if request.auth != null;
    }
    
    // ============================================================================
    // üìÅ PROJECTS COLLECTION
    // ============================================================================
    match /projects/{projectId} {
      // Project owners can read/write their projects
      allow read, write: if request.auth != null && request.auth.uid == resource.data.owner_id;
      
      // All authenticated users can read active projects
      allow read: if request.auth != null && resource.data.status == 'active';
      
      // Only owners can create projects
      allow create: if request.auth != null && request.auth.uid == request.resource.data.owner_id;
    }
    
    // ============================================================================
    // üëÜ SWIPES COLLECTION
    // ============================================================================
    match /swipes/{swipeId} {
      // Users can create their own swipes
      allow create: if request.auth != null && request.auth.uid == request.resource.data.swiper_id;
      
      // Users can read their own swipes
      allow read: if request.auth != null && (request.auth.uid == resource.data.swiper_id || request.auth.uid == resource.data.target_id);
      
      // No update/delete allowed (immutable)
    }
    
    // ============================================================================
    // üíï MATCHES COLLECTION
    // ============================================================================
    match /matches/{matchId} {
      // Users can read matches they're part of
      allow read: if request.auth != null && (request.auth.uid == resource.data.user1_id || request.auth.uid == resource.data.user2_id);
      
      // Users can update match status if they're part of the match
      allow update: if request.auth != null && (request.auth.uid == resource.data.user1_id || request.auth.uid == resource.data.user2_id);
      
      // No create/delete from client
    }
    
    // ============================================================================
    // üí¨ MESSAGES COLLECTION
    // ============================================================================
    match /messages/{messageId} {
      // Users can send/receive messages
      allow read, write: if request.auth != null && (request.auth.uid == resource.data.sender_id || request.auth.uid == resource.data.receiver_id);
      
      // Allow creation of messages
      allow create: if request.auth != null && request.auth.uid == request.resource.data.sender_id;
      
      // No update/delete from client
    }
    
    // ============================================================================
    // üìß EMAIL COLLECTIONS
    // ============================================================================
    match /welcome_emails/{docId} {
      // Allow authenticated users to create welcome email records
      allow create: if request.auth != null;
      // Allow reading own welcome email records
      allow read: if request.auth != null && request.auth.uid == resource.data.user_id;
    }
    
    match /email_errors/{docId} {
      // Allow authenticated users to create error records
      allow create: if request.auth != null;
      // Allow reading own error records
      allow read: if request.auth != null && request.auth.uid == resource.data.user_id;
    }
    
    // ============================================================================
    // ü§ñ ML RECOMMENDATIONS COLLECTION 
    // ============================================================================
    match /recommendations/{userId} {
      // Users can only read their own recommendations
      allow read: if request.auth != null && request.auth.uid == userId;
    }
    
    // ============================================================================
    // üè• HEALTH CHECK COLLECTION
    // ============================================================================
    match /_health_check/{docId} {
      // Allow authenticated users to write health checks
      allow write: if request.auth != null;
      // Allow system reads for monitoring
      allow read: if request.auth != null;
    }
    
    // ============================================================================
    // üìä ANALYTICS COLLECTION
    // ============================================================================
    match /analytics/{docId} {
      // Read-only access for authenticated users
      allow read: if request.auth != null;
    }
    
    // ============================================================================
    // üõéÔ∏è USER NOTIFICATIONS COLLECTION
    // ============================================================================
    match /user_notifications/{docId} {
      // Allow authenticated users to create notification records for themselves
      allow create: if request.auth != null && request.auth.uid == request.resource.data.user_id;
      // Allow reading own notification records
      allow read: if request.auth != null && request.auth.uid == resource.data.user_id;
    }
  }
} 